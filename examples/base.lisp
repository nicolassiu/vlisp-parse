(progn
  (defvar x 100)
  (print x)
  (print "hello, world!")
  (defvar name "devilandpuppy")
  (print "hello," name)
  (defvar a-list (quote (1 2 3)))
  (print (car a-list) a-list 100)
  (print (car a-list) (cadr a-list) (caddr a-list))
  (print (car (quote (100 200 300))))
  (print (+ 1 2 3 4 5 6 7 8 9 10))
  (print (- 10 2))
  (print (* 1 2 3 4 5 6 7 8 9 10))
  (print (/ 10 3))
  (defvar another-list '(6 7 8))
  (print (car another-list))
  (defvar symbol 'this-is-a-symbol)
  (print symbol)
  (defvar a-list-composed-by-list (list 1 2 3))
  (print (car a-list-composed-by-list))
  (print a-list-composed-by-list)
  (defvar eval-list (list 1 (+ 1 2) (+ 2 3)))
  (print eval-list)
  (defvar zz (cons 1 2))
  (print (car zz ) (cdr zz))
  (defvar list-of-cons (cons 1 (cons 2 '())))
  (print list-of-cons)
  (print . ("hello"))
  (print '(1 2 . 3))
  (print "this is a list" '(1 2 . (3))))

